# Use the UBI 9 NGINX image as the base
FROM registry.access.redhat.com/ubi9/nginx-118

# Copy custom NGINX configuration file
COPY my-nginx-config.conf /etc/nginx/nginx.conf

# Copy any additional files needed by your application
COPY /path/to/your/files /usr/share/nginx/html

# Expose port 80
EXPOSE 80

# Start NGINX
CMD ["nginx", "-g", "daemon off;"]


Sure, here's a simple shell script to apply the `deployment.yaml` file to a specific namespace using `kubectl`:

```sh
#!/bin/bash

# Variables
NAMESPACE="your-namespace"
DEPLOYMENT_FILE="deployment.yaml"

# Apply the deployment
kubectl apply -f $DEPLOYMENT_FILE -n $NAMESPACE

# Check the status of the deployment
kubectl rollout status deployment/$(basename $DEPLOYMENT_FILE .yaml) -n $NAMESPACE
```

Make sure to replace `your-namespace` with the actual namespace you want to use. Save this script to a file, for example, `deploy.sh`, and make it executable:

```sh
chmod +x deploy.sh
```

Then you can run it:

```sh
./deploy.sh
```





If you need to delete multiple deployment YAML files using a shell script, you can extend the script to iterate over a list of files. Here is a revised version of the script to handle multiple deployment files:

```sh
#!/bin/bash

# Variables
NAMESPACE="amazonlp-app-uat"

# List of deployment files
DEPLOYMENT_FILES=(
    "vKycWithDigiLocker-enhance-service-deployment.yaml"
    "another-service-deployment.yaml"
    "yet-another-service-deployment.yaml"
    # Add more deployment files as needed
)

# Iterate over each deployment file and delete it
for DEPLOYMENT_FILE in "${DEPLOYMENT_FILES[@]}"; do
    if [ -f "$DEPLOYMENT_FILE" ]; then
        echo "Deleting deployment from file: $DEPLOYMENT_FILE"
        kubectl delete -f "$DEPLOYMENT_FILE" -n "$NAMESPACE"
    else
        echo "Error: The file '$DEPLOYMENT_FILE' does not exist."
    fi
done
```

### Steps to Use the Script

1. **Save the Script:**
   Save the above script to a file, for example, `delete_deployments.sh`.

2. **Make the Script Executable:**
   ```sh
   chmod +x delete_deployments.sh
   ```

3. **Run the Script:**
   ```sh
   ./delete_deployments.sh
   ```

### Notes:
- Ensure all the deployment files listed in `DEPLOYMENT_FILES` array are in the same directory where you are executing the script, or provide the correct paths to them.
- You can add or remove files from the `DEPLOYMENT_FILES` array as needed.

